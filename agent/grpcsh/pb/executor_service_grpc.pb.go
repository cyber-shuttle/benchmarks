// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.29.3
// source: executor_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ExecutorService_Exec_FullMethodName = "/grpcsh.ExecutorService/Exec"
)

// ExecutorServiceClient is the client API for ExecutorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExecutorServiceClient interface {
	Exec(ctx context.Context, opts ...grpc.CallOption) (ExecutorService_ExecClient, error)
}

type executorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExecutorServiceClient(cc grpc.ClientConnInterface) ExecutorServiceClient {
	return &executorServiceClient{cc}
}

func (c *executorServiceClient) Exec(ctx context.Context, opts ...grpc.CallOption) (ExecutorService_ExecClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ExecutorService_ServiceDesc.Streams[0], ExecutorService_Exec_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &executorServiceExecClient{ClientStream: stream}
	return x, nil
}

type ExecutorService_ExecClient interface {
	Send(*Message) error
	Recv() (*Result, error)
	grpc.ClientStream
}

type executorServiceExecClient struct {
	grpc.ClientStream
}

func (x *executorServiceExecClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *executorServiceExecClient) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExecutorServiceServer is the server API for ExecutorService service.
// All implementations must embed UnimplementedExecutorServiceServer
// for forward compatibility
type ExecutorServiceServer interface {
	Exec(ExecutorService_ExecServer) error
	mustEmbedUnimplementedExecutorServiceServer()
}

// UnimplementedExecutorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExecutorServiceServer struct {
}

func (UnimplementedExecutorServiceServer) Exec(ExecutorService_ExecServer) error {
	return status.Errorf(codes.Unimplemented, "method Exec not implemented")
}
func (UnimplementedExecutorServiceServer) mustEmbedUnimplementedExecutorServiceServer() {}

// UnsafeExecutorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExecutorServiceServer will
// result in compilation errors.
type UnsafeExecutorServiceServer interface {
	mustEmbedUnimplementedExecutorServiceServer()
}

func RegisterExecutorServiceServer(s grpc.ServiceRegistrar, srv ExecutorServiceServer) {
	s.RegisterService(&ExecutorService_ServiceDesc, srv)
}

func _ExecutorService_Exec_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExecutorServiceServer).Exec(&executorServiceExecServer{ServerStream: stream})
}

type ExecutorService_ExecServer interface {
	Send(*Result) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type executorServiceExecServer struct {
	grpc.ServerStream
}

func (x *executorServiceExecServer) Send(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func (x *executorServiceExecServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExecutorService_ServiceDesc is the grpc.ServiceDesc for ExecutorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExecutorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcsh.ExecutorService",
	HandlerType: (*ExecutorServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Exec",
			Handler:       _ExecutorService_Exec_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "executor_service.proto",
}
