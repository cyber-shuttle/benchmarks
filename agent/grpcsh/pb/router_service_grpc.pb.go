// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.29.3
// source: router_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	RouterService_Connect_FullMethodName = "/grpcsh.RouterService/Connect"
)

// RouterServiceClient is the client API for RouterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RouterServiceClient interface {
	Connect(ctx context.Context, opts ...grpc.CallOption) (RouterService_ConnectClient, error)
}

type routerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRouterServiceClient(cc grpc.ClientConnInterface) RouterServiceClient {
	return &routerServiceClient{cc}
}

func (c *routerServiceClient) Connect(ctx context.Context, opts ...grpc.CallOption) (RouterService_ConnectClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RouterService_ServiceDesc.Streams[0], RouterService_Connect_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &routerServiceConnectClient{ClientStream: stream}
	return x, nil
}

type RouterService_ConnectClient interface {
	Send(*PeerMessage) error
	Recv() (*PeerMessage, error)
	grpc.ClientStream
}

type routerServiceConnectClient struct {
	grpc.ClientStream
}

func (x *routerServiceConnectClient) Send(m *PeerMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *routerServiceConnectClient) Recv() (*PeerMessage, error) {
	m := new(PeerMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RouterServiceServer is the server API for RouterService service.
// All implementations must embed UnimplementedRouterServiceServer
// for forward compatibility
type RouterServiceServer interface {
	Connect(RouterService_ConnectServer) error
	mustEmbedUnimplementedRouterServiceServer()
}

// UnimplementedRouterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRouterServiceServer struct {
}

func (UnimplementedRouterServiceServer) Connect(RouterService_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedRouterServiceServer) mustEmbedUnimplementedRouterServiceServer() {}

// UnsafeRouterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RouterServiceServer will
// result in compilation errors.
type UnsafeRouterServiceServer interface {
	mustEmbedUnimplementedRouterServiceServer()
}

func RegisterRouterServiceServer(s grpc.ServiceRegistrar, srv RouterServiceServer) {
	s.RegisterService(&RouterService_ServiceDesc, srv)
}

func _RouterService_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RouterServiceServer).Connect(&routerServiceConnectServer{ServerStream: stream})
}

type RouterService_ConnectServer interface {
	Send(*PeerMessage) error
	Recv() (*PeerMessage, error)
	grpc.ServerStream
}

type routerServiceConnectServer struct {
	grpc.ServerStream
}

func (x *routerServiceConnectServer) Send(m *PeerMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *routerServiceConnectServer) Recv() (*PeerMessage, error) {
	m := new(PeerMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RouterService_ServiceDesc is the grpc.ServiceDesc for RouterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RouterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcsh.RouterService",
	HandlerType: (*RouterServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _RouterService_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "router_service.proto",
}
